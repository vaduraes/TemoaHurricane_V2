import numpy as np
from scipy.stats import norm

#Updated Fragility Curves





def fragility(wind_mph, curve="None"):

    # =====================================#
    # General Fragility Curves             #
    # =====================================#
     if curve == "NotAffected":
          x=[0,200]
          y=[0,0]
          p_failure = np.interp(wind_mph, x, y)

######################################################
######################################################
#--- Fragitilites for Wind turbines
######################################################
##################################################################################################################################################################

     #DOI: 10.1111/risa.12085
     #Equation (3)
     elif curve == "wind_no_yaw_Rose":
          #offshore wind
          #The function was developed for a turbine of hub height of 90m
          #and 10-min average wind speed. Hazus is for 10m height and 3s gust.
          #We need to covnert accordingly
          
          wind_knots = wind_mph*0.868976*(1.19)/(1.23) 
          #Fist converson of units
          #Second for height https://www.nhc.noaa.gov/aboutwindprofile.shtml (10m to 300ft)
          #Third for time interval (https://library.wmo.int/doc_num.php?explnum_id=290) from 3s to 10min
          
          #Log-Logistic Distribution in knots
          alpha=139.6
          beta=18.6
          x = np.arange(30,300)
          y = 1/(1+(x/alpha)**(-beta))

          p_failure = np.interp(wind_knots, x, y, left=0.0, right=1.0)
          
     #DOI: 10.1111/risa.12085
     #Equation (3)
     elif curve == "wind_yaw_Rose":
          #offshore wind
          #The function was developed for a turbine of hub height of 90m
          #and 10-min average wind speed. Hazus is for 10m height and 3s gust.
          #We need to covnert accordingly
          
          wind_knots = wind_mph*0.868976*(1.19)/(1.23) 
          #Fist converson of units
          #Second for height https://www.nhc.noaa.gov/aboutwindprofile.shtml (10m to 300ft)
          #Third for time interval (https://library.wmo.int/doc_num.php?explnum_id=290) from 3s to 10min
          
          #Log-Logistic Distribution in knots
          alpha=174.0
          beta=19.6
          x = np.arange(30,300)
          y = 1/(1+(x/alpha)**(-beta))

          p_failure = np.interp(wind_knots, x, y, left=0.0, right=1.0)
          
     #https://doi.org/10.1002/we.2600
     #No yawing- which can be argued as reasonable (read: https://www.pnas.org/doi/epdf/10.1073/pnas.1111769109)
     #3.3MW -100m Hub
     #The paper does not specify the average time of the wind measurement but from the reference he used to generate the data (Snaiki and Wu)
     #We can assume it is beeing reported at 3s. https://doi.org/10.1002/we.2436 Use the same reference to generate the hurricane, but speciy the average period for the wind
     elif curve == "wind_land_NoDamping_Campo":  #Track plot
          wind_mps = wind_mph* 0.44704  # ground wind speed (h=10meters)
          
          x=[37.91862285,39.01408451,39.91392801,40.46165884,41.36150235,41.90923318,42.41784038,42.92644757,43.55242567,
             43.94366197,44.41314554,44.96087637,45.39123631,45.97809077,46.48669797,47.23004695,48.01251956,48.83411581,
             49.61658842,50.04694836,50.51643192,50.94679186,51.53364632,52.04225352,52.55086072,53.09859155,53.68544601,54.27230047,55.01564945,55.79812207,56.61971831,57.79342723,58.96713615]
          
          y=[0,0.008823529,0.008823529,0.011764706,0.020588235,0.026470588,0.035294118,0.047058824,0.070588235,0.082352941,0.102941176,
               0.135294118,0.161764706,0.208823529,0.25,0.323529412,0.402941176,0.5,0.576470588,0.626470588,0.673529412,0.717647059,0.764705882,
               0.808823529,0.841176471,0.879411765,0.905882353,0.929411765,0.952941176,0.967647059,0.982352941,0.991176471,1]
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None       

     #https://doi.org/10.1002/we.2600
     #No yawing- which can be argued as reasonable (read: https://www.pnas.org/doi/epdf/10.1073/pnas.1111769109)
     #3.3MW -100m Hub
     #The paper does not specify the average time of the wind measurement but from the reference he used to generate the data (Snaiki and Wu)
     #We can assume it is beeing reported at 3s
     elif curve == "wind_land_WithDamping_Campo":  #Track plot
          wind_mps = wind_mph* 0.44704  # ground wind speed (h=10meters)
          
          x=[38.01251956,39.87480438,40.86071987,42.17527387,43.38028169,44.36619718,45.57120501,46.66666667,47.2143975,47.65258216,48.25508607,48.91236307,
             50.11737089,51.32237872,52.74647887,53.2942097,53.9514867,54.33489828,55.04694836,55.81377152,56.90923318,57.67605634,58.16901408,58.60719875,
             59.70266041,61.3458529,62.6056338,64.41314554,65.61815336]
          y=[0,0.005882353,0.011764706,0.020588235,0.035294118,0.047058824,0.091176471,0.132352941,0.158823529,0.185294118,0.223529412,0.267647059,
             0.364705882,0.458823529,0.588235294,0.644117647,0.670588235,0.723529412,0.773529412,0.817647059,0.876470588,0.902941176,0.923529412,0.938235294,
             0.961764706,0.979411765,0.991176471,1,1]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None   
     
     #https://doi.org/10.1002/we.2436
     elif curve == "wind_land_Miguel":  #Track plot
          wind_kph = wind_mph * 1.60934  # ground wind speed (h=10meters)
          x=[150.1607717,152.8938907,157.3954984,159.3247588,162.5401929,164.6302251,165.9163987,168.6495177,170.7395498,173.1511254,174.9196141,176.5273312,178.6173633,
          180.5466238,181.9935691,183.7620579,185.3697749,186.6559486,188.585209,191.4790997,193.5691318,195.8199357,199.0353698,206.1093248,211.2540193,216.2379421]

          y=[0,0.008849558,0.026548673,0.051327434,0.097345133,0.130973451,0.169911504,0.260176991,0.32920354,0.412389381,0.492035398,0.566371681,0.638938053,0.704424779,
          0.753982301,0.803539823,0.838938053,0.872566372,0.902654867,0.938053097,0.953982301,0.969911504,0.978761062,0.994690265,0.996460177,1]
          p_failure = np.interp(wind_kph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None   

     #Average of wind_land_Miguel and wind_land_WithDamping_Campo
     elif curve == "wind_AVG_CAMPO_MIGUEL":  #Track plot
          wind_mps = wind_mph* 0.44704  # ground wind speed (h=10meters)
          
          x=[37.91862285,39.01408451,39.91392801,40.46165884,41.36150235,41.90923318,42.41784038,42.92644757,43.55242567,
             43.94366197,44.41314554,44.96087637,45.39123631,45.97809077,46.48669797,47.23004695,48.01251956,48.83411581,
             49.61658842,50.04694836,50.51643192,50.94679186,51.53364632,52.04225352,52.55086072,53.09859155,53.68544601,54.27230047,55.01564945,55.79812207,56.61971831,57.79342723,58.96713615]
          
          y=[0,0.008823529,0.008823529,0.011764706,0.020588235,0.026470588,0.035294118,0.047058824,0.070588235,0.082352941,0.102941176,
               0.135294118,0.161764706,0.208823529,0.25,0.323529412,0.402941176,0.5,0.576470588,0.626470588,0.673529412,0.717647059,0.764705882,
               0.808823529,0.841176471,0.879411765,0.905882353,0.929411765,0.952941176,0.967647059,0.982352941,0.991176471,1]
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None     
          
          wind_kph = wind_mph * 1.60934  # ground wind speed (h=10meters)
          x=[150.1607717,152.8938907,157.3954984,159.3247588,162.5401929,164.6302251,165.9163987,168.6495177,170.7395498,173.1511254,174.9196141,176.5273312,178.6173633,
          180.5466238,181.9935691,183.7620579,185.3697749,186.6559486,188.585209,191.4790997,193.5691318,195.8199357,199.0353698,206.1093248,211.2540193,216.2379421]

          y=[0,0.008849558,0.026548673,0.051327434,0.097345133,0.130973451,0.169911504,0.260176991,0.32920354,0.412389381,0.492035398,0.566371681,0.638938053,0.704424779,
          0.753982301,0.803539823,0.838938053,0.872566372,0.902654867,0.938053097,0.953982301,0.969911504,0.978761062,0.994690265,0.996460177,1]
          p_failure2 = np.interp(wind_kph, x, y, left=0.0, right=1.0)
          p_failure2[p_failure2>y[-1]]=None   
          
          p_failure=(p_failure+p_failure2)/2

     #https://doi.org/10.1016/j.engstruct.2023.116625 (Does not look accurate)
     #monopile non-pm
     elif curve == "wind_offshore_PMChen":  #Track plot 
          wind_mps = wind_mph * 0.44704  # 
          wind_mps=wind_mps*1.19 #Convert to 90m wind speed from 10m- https://www.nhc.noaa.gov/aboutwindprofile.shtml
          x=[30.97288676,37.73524721,42.83891547,46.66666667,49.85645933,52.28070175,55.47049442,57.76714514,62.61562998,67.33652313,72.82296651,77.28867624,80.73365231,85.07177033,
          88.00637959,89.92025518,91.45135566,93.23763955,94.89633174,96.1722488,97.70334928,99.61722488,100.7655502,102.169059,105.1036683,108.9314195,111.8660287,114.800638,
          116.5869219,119.2663477]

          y=[0,0.00296846,0.00445269,0.01187384,0.020779221,0.025231911,0.026716141,0.026716141,0.026716141,0.032653061,0.044526902,0.062337662,0.077179963,0.109833024,
          0.132096475,0.157328386,0.181076067,0.212244898,0.237476809,0.27012987,0.311688312,0.363636364,0.396289425,0.434879406,0.512059369,0.610018553,0.682745826,
          0.734693878,0.773283859,0.80148423]
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None   
          
     #https://doi.org/10.1016/j.engstruct.2023.116625 (Does not look accurate)
     #monopile non-ESM
     elif curve == "wind_offshore_ESMChen":  #Track plot
          wind_mps = wind_mph * 0.44704  # 
          wind_mps=wind_mps*1.19 #Convert to 90m wind speed from 10m- https://www.nhc.noaa.gov/aboutwindprofile.shtml
          
          x=[22.87581699,25.22875817,27.97385621,30.19607843,32.41830065,34.37908497,35.94771242,38.30065359,40.26143791,41.17647059,43.52941176,44.5751634,46.2745098,47.45098039,48.88888889,
          50.19607843,51.37254902,52.54901961,53.9869281,55.29411765,56.8627451,58.43137255,59.34640523,61.04575163,62.61437908,64.18300654,64.96732026,66.53594771,68.10457516,69.1503268,
          71.50326797,73.9869281,77.25490196,80.13071895,84.05228758]
          
          y=[0.003039514,0.009118541,0.016717325,0.019756839,0.024316109,0.027355623,0.031914894,0.037993921,0.044072948,0.051671733,0.065349544,0.075987842,0.100303951,0.126139818,0.155015198,
          0.185410334,0.218844985,0.253799392,0.290273556,0.320668693,0.366261398,0.40881459,0.443768997,0.503039514,0.556231003,0.603343465,0.641337386,0.689969605,0.73100304,0.76443769,
          0.813069909,0.854103343,0.882978723,0.892097264,0.899696049]
               
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None   

######################################################
######################################################
#--- Fragitilites for Solar
######################################################
##################################################################################################################################################################

     #https://doi.org/10.1016/j.ress.2022.108896
     #This reference does not seem correct there seems to have an inconsistancy with data they use in the paper and the data on the original manuscript of cited authors
     #data references as Goodman which the paper cites is not consistent with the original Goodman data
     
     elif curve == "solar_roof1":    #Track plot
          wind_mps = wind_mph * 0.44704  # ground wind speed (h=10meters)
          x=[40.16620499,44.32132964,47.92243767,51.74515235,54.18282548,56.73130194,58.28254848,60.88642659,62.71468144,64.26592798,
             66.14958449,67.86703601,70.08310249,72.02216066,74.62603878,79.27977839,81.77285319,83.98891967,86.48199446,90.19390582,
             93.24099723,97.50692521,100.2770083,103.6565097,107.7562327,112.1883657,116.7313019,119.5567867]

          y=[0.034552846,0.049796748,0.075203252,0.103658537,0.12398374,0.150406504,0.174796748,0.205284553,0.229674797,0.255081301,
             0.275406504,0.304878049,0.343495935,0.37601626,0.416666667,0.491869919,0.524390244,0.557926829,0.600609756,0.649390244,
             0.68699187,0.725609756,0.758130081,0.786585366,0.81402439,0.843495935,0.864837398,0.882113821]
          
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
     
     ##https://doi.org/10.1016/j.ress.2022.108896
     #This reference does not seem correct there seems to have an inconsistancy with data they use in the paper and the data on the original manuscript of cited authors
     #data references as Goodman which the paper cites is not consistent with the original Goodman data
     #futhermore at 268.432mph=120mps I doubt any solar pannel would survive
     elif curve == "solar_ground1":  #Track plot
          wind_mps = wind_mph * 0.44704  # ground wind speed (h=10meters)
          x=[45.18918919,49.94594595,53.78378378,57.94594595,60.91891892,64.48648649,68.43243243,71.35135135,73.94594595,76.16216216,
             78.64864865,81.2972973,83.18918919,84.81081081,86.54054054,87.94594595,90.64864865,93.24324324,95.35135135,98.10810811,100.1081081,
             103.6216216,106.3783784,109.8378378,113.8378378,116.4864865,119.027027]
          
          y=[0,0.002,0.007,0.011,0.017,0.029,0.058,0.082,0.115,0.153,0.211,0.252,0.299,0.34,0.385,0.427,0.507,0.573,0.631,0.687,0.727,0.789,0.82,0.858,0.891,0.91,0.918]
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)

     #https://www.osti.gov/servlets/purl/1969999
     #Derived from Ceferino et al. (2021)
     elif curve == "solar_Kabre":  #Track plot
          wind_mps = wind_mph * 0.44704  
          
          x=[40.47977422,41.98494826,43.18908749,44.24270931,45.44684854,46.34995296,47.40357479,48.23142051,49.20978363,50.33866416,50.86547507,
          51.84383819,52.67168391,53.65004704,54.62841016,55.53151458,56.2088429,57.56349953,59.14393227,60.27281279,61.40169332,62.15428034,
          63.28316087,64.11100659,65.23988711,66.21825024,67.49764817,69.0028222,70.95954845,73.1420508,75.09877705,77.2060207,79.46378175,81.6462841,85.18344309]
          
          y=[0,0.001295337,0.006476684,0.014248705,0.025906736,0.038860104,0.053108808,0.07642487,0.101036269,0.121761658,0.147668394,0.186528497,
             0.222797927,0.264248705,0.314766839,0.365284974,0.408031088,0.468911917,0.556994819,0.612694301,0.658031088,0.698186528,0.740932642,
             0.775906736,0.809585492,0.836787565,0.875647668,0.908031088,0.939119171,0.96373057,0.977979275,0.985751295,0.992227979,0.992227979,0.994818653]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)


     #https://www.osti.gov/servlets/purl/1969999
     #Derived from Ceferino et al. (2021)
     elif curve == "solar_Kabre":  #Track plot
          wind_mps = wind_mph * 0.44704  
          
          x=[40.47977422,41.98494826,43.18908749,44.24270931,45.44684854,46.34995296,47.40357479,48.23142051,49.20978363,50.33866416,50.86547507,
          51.84383819,52.67168391,53.65004704,54.62841016,55.53151458,56.2088429,57.56349953,59.14393227,60.27281279,61.40169332,62.15428034,
          63.28316087,64.11100659,65.23988711,66.21825024,67.49764817,69.0028222,70.95954845,73.1420508,75.09877705,77.2060207,79.46378175,81.6462841,85.18344309]
          
          y=[0,0.001295337,0.006476684,0.014248705,0.025906736,0.038860104,0.053108808,0.07642487,0.101036269,0.121761658,0.147668394,0.186528497,
             0.222797927,0.264248705,0.314766839,0.365284974,0.408031088,0.468911917,0.556994819,0.612694301,0.658031088,0.698186528,0.740932642,
             0.775906736,0.809585492,0.836787565,0.875647668,0.908031088,0.939119171,0.96373057,0.977979275,0.985751295,0.992227979,0.992227979,0.994818653]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          

     #http://hdl.handle.net/1853/54910
     elif curve == "solar_Goodman_18_102_U_15":  #Track plot
          #90mph wind zone
          x=[90,95.15183246,97.79057592,101.7486911,104.6806283,106.8795812,110.104712,113.6230366,115.9685864,119.486911,123.2984293,
             125.3507853,128.1361257,131.2146597,133.2670157,136.7853403,139.4240838,142.3560209,145.7277487,149.6858639,153.2041885,158.0418848,
             162.1465969,165.9581152,170.0628272]
          
          y=[0,0.008130081,0.018292683,0.034552846,0.050813008,0.071138211,0.105691057,0.158536585,0.211382114,0.286585366,0.37398374,0.424796748,0.483739837,
             0.544715447,0.589430894,0.658536585,0.707317073,0.754065041,0.804878049,0.859756098,0.894308943,0.928861789,0.93902439,0.957317073,0.971544715]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None
          
     #http://hdl.handle.net/1853/54910
     elif curve == "solar_Goodman_90_101_U_30":  #Track plot
          #30 degrees exacly equal to 15
          #90mph wind zone
          x=[90.26666667,94.4,97.73333333,101.4666667,103.2,106.2666667,108.5333333,111.4666667,114,115.8666667,118,120,122.4,125.0666667,128.1333333,131.7333333,
             134,137.0666667,139.3333333,142,145.2,147.8666667,153.4666667,156.9333333,160.5333333,164.2666667,167.8666667,170]
          
          y=[0,0.009225092,0.014760148,0.031365314,0.040590406,0.062730627,0.086715867,0.125461255,0.167896679,0.21402214,0.254612546,
             0.300738007,0.357933579,0.41697417,0.487084871,0.553505535,0.599630996,0.65498155,0.704797048,0.747232472,0.804428044,0.839483395,
             0.900369004,0.922509225,0.939114391,0.950184502,0.963099631,0.974169742]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None          
          
     #http://hdl.handle.net/1853/54910
     elif curve == "solar_Goodman_min_impact":  #Track plot
          #15degrees
          #90mph wind zone
          x=[99.11392405,101.6455696,105.0632911,107.5949367,109.6202532,111.8987342,113.2911392,114.9367089,116.2025316,118.2278481,119.3670886,
          121.3924051,123.164557,124.8101266,126.2025316,127.9746835,129.8734177,131.5189873,133.0379747,134.556962,137.4683544,139.7468354,
          142.4050633,145.1898734,148.1012658,151.2658228,153.5443038,156.7088608,159.3670886,162.0253165,164.1772152,166.3291139,168.4810127,170.2531646]
          y=[0,0.001748252,0.012237762,0.024475524,0.043706294,0.068181818,0.085664336,0.11013986,0.134615385,0.167832168,0.192307692,0.229020979,
          0.267482517,0.300699301,0.332167832,0.361888112,0.403846154,0.435314685,0.466783217,0.498251748,0.559440559,0.61013986,0.666083916,0.716783217,
          0.769230769,0.814685315,0.844405594,0.867132867,0.888111888,0.905594406,0.917832168,0.93006993,0.940559441,0.951048951]


          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None     
              
     #http://hdl.handle.net/1853/54910
     elif curve == "solar_Goodman_max_impact":  #Track plot
          #15degrees
          #90mph wind zone

          x=[90,95.69620253,99.87341772,102.278481,105.1898734,107.9746835,111.7721519,113.164557,114.556962,115.8227848,117.4683544,118.8607595,
          120.2531646,121.7721519,123.164557,124.8101266,126.3291139,128.2278481,130.7594937,132.5316456,134.3037975,136.4556962,138.3544304,
          140.5063291,143.0379747,145.8227848,148.6075949,151.6455696,154.3037975,157.721519,160,163.5443038,168.4810127,170.2531646]
          
          y=[0.001748252,0.026223776,0.045454545,0.062937063,0.085664336,0.120629371,0.178321678,0.208041958,0.241258741,0.272727273,0.314685315,
          0.354895105,0.38986014,0.433566434,0.468531469,0.513986014,0.555944056,0.597902098,0.648601399,0.681818182,0.713286713,0.743006993,
          0.776223776,0.804195804,0.835664336,0.867132867,0.896853147,0.923076923,0.937062937,0.947552448,0.952797203,0.961538462,0.975524476,0.979020979]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None         

          
######################################################
######################################################
#--- Fragitilites for Hazus 5.1 (Open terrain)
######################################################
##################################################################################################################################################################
     # Open terrain
     elif curve == "SECBL":  #Track plot, open
          x=[95,104.9354839,109.9032258,114.983871,120.1774194,125.0322581,130,134.8548387,139.8225806,145.016129,150.0967742,154.8387097,160.1451613,165.1129032,169.8548387,175.0483871,
          180.016129,184.8709677,189.8387097,195.1451613,199.8870968]
          y=[0,0.006258693,0.015020862,0.022531293,0.036300417,0.050069541,0.070097357,0.092628651,0.120166898,0.148956885,0.176495132,0.221557719,0.265368567,0.3054242,0.355493741,
          0.406815021,0.460639777,0.499443672,0.539499305,0.58581363,0.624617524]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None         
          
     #Suburban
     elif curve == "SECBL_sub":  #Track plot, open
          x=[99.89010989,104.9450549,110,114.9450549,125.0549451,129.7802198,135.0549451,140,145.1648352,149.8901099,154.9450549,159.6703297,165.1648352,
          170.1098901,175.1648352,180,184.8351648,189.8901099,195.0549451,199.6703297]
          y=[0.001952278,0.003904555,0.007809111,0.013665944,0.02537961,0.03318872,0.048806941,0.070281996,0.093709328,0.119088937,0.15032538,0.189370933,
          0.222559653,0.279175705,0.343600868,0.417787419,0.46659436,0.527114967,0.618872017,0.685249458]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None  
               
     # Open terrain
     elif curve == "SECBM":  #Track plot, open
          x=[84.98017446,89.86518636,94.97224425,99.96827914,104.964314,109.8493259,115.0674068,119.7303727,124.5043616,129.9444885,134.9405234,140.1586043,
          145.0436162,150.1506741,155.035686,159.8096749,165.0277557,169.9127676,174.9088025,179.7938144,185.3449643,190.1189532,195.1149881,199.777954]
          y=[0,0.001167883,0.004671533,0.011678832,0.021021898,0.030364964,0.044379562,0.054890511,0.066569343,0.082919708,0.099270073,0.109781022,0.12729927,
          0.147153285,0.168175182,0.202043796,0.22540146,0.265109489,0.324671533,0.373722628,0.412262774,0.456642336,0.489343066,0.534890511]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None         
 
     # Open terrain
     elif curve == "SECBH":  #Track plot, open
          x=[74.55805893,79.65337955,84.74870017,89.72270364,94.69670711,99.3067591,104.8873484,114.8353553,119.8093588,124.9046794,129.7573657,134.7313692,139.8266898,
          144.5580589,149.7746967,155.5979203,155.5979203,160.0866551,164.9393414,170.034662,174.644714,180.1039861,184.9566724,189.9306759,194.9046794,199.7573657]
          
          y=[0,0.006698565,0.013397129,0.021212121,0.030143541,0.03907496,0.046889952,0.064752791,0.069218501,0.075917065,0.083732057,0.093779904,0.107177033,
          0.13062201,0.157416268,0.193141946,0.193141946,0.228867624,0.257894737,0.290271132,0.331578947,0.371770335,0.406379585,0.435406699,0.464433812,0.496810207]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None         
 
     # Open terrain
     elif curve == "CECBL":  #Track plot, open
          x=[105.0791139,109.9525316,115.0474684,120.1424051,124.9050633,130,135.0949367,139.8575949,144.9525316,150.0474684,154.8101266,159.9050633,165,169.7626582,
          175.0791139,180.1740506,184.9367089,189.8101266,195.0158228,199.778481]
          y=[0.004891304,0.005706522,0.008152174,0.013043478,0.017934783,0.021195652,0.027717391,0.033423913,0.038315217,0.046467391,0.064402174,0.082336957,
          0.089673913,0.114130435,0.152445652,0.196467391,0.211956522,0.225815217,0.249456522,0.283695652]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None                  

     # Open terrain          
     elif curve == "CECBM":  #Track plot, open
          x=[79.8702352,84.86618005,89.9756691,94.74452555,100.081103,104.8499594,109.8459043,114.9553933,120.1784266,124.947283,130.1703163,135.052717,140.0486618,145.0446067,
          149.6999189,154.9229521,160.1459854,165.0283861,170.2514193,175.2473642,180.0162206,185.2392539,190.1216545,194.8905109,200]
          y=[0.0,0.0,0.004958678,0.00661157,0.00661157,0.008264463,0.007713499,0.009917355,0.01046832,0.012672176,0.012672176,0.013774105,0.015977961,0.020936639,
          0.02369146,0.033057851,0.043526171,0.046280992,0.056198347,0.074380165,0.095867769,0.114049587,0.139393939,0.180716253,0.238016529]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None       

     # Open terrain
     elif curve == "CECBH":  #Track plot, open
          x=[79.77653631,85.02793296,90.05586592,94.97206704,99.88826816,105.2513966,109.9441341,115.0837989,120,124.8044693,129.8324022,134.7486034,139.8882682,144.8044693,149.9441341,
          154.972067,160,165.1396648,170.0558659,174.7486034,180.1117318,185.027933,189.7206704,194.8603352,199.7765363]
          y=[0,0.000550206,0.001650619,0.003851444,0.004951857,0.004401651,0.006602476,0.007152682,0.007702889,0.008803301,0.01045392,0.011004127,0.013204952,0.017056396,0.022558459,
          0.030811554,0.041265475,0.0434663,0.05392022,0.070976616,0.095185695,0.112242091,0.136451169,0.180467675,0.239339752]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None        
          

######################################################
######################################################
#---  Transmission
######################################################
##################################################################################################################################################################
     
     #https://doi.org/10.1061/9780784484463.030
     elif curve == "TransmissionTower_Du":  #Track plot
          wind_mps = wind_mph * 0.44704  
          x=[34.93333333,36.53333333,37.68888889,38.93333333,40.35555556,41.33333333,42.75555556,44.44444444,45.33333333,46.4,47.28888889,48.08888889,48.88888889,49.95555556,52.08888889,
             53.95555556,56.17777778,58.93333333,60.17777778,61.15555556,61.95555556,63.2,64.35555556,65.33333333,66.13333333,66.84444444,67.82222222,68.71111111,69.77777778,71.02222222,
             72.17777778,74.04444444,75.64444444,78.13333333,81.77777778]
          y=[0,0.001267427,0.006337136,0.011406844,0.021546261,0.030418251,0.053231939,0.087452471,0.108998733,0.141951838,0.171102662,0.197718631,0.234474018,0.273764259,0.382762991,
             0.476552598,0.588086185,0.707224335,0.759188847,0.790874525,0.816223067,0.846641318,0.875792142,0.894803549,0.910012674,0.922686946,0.932826362,0.945500634,0.956907478,0.965779468,
             0.97338403,0.980988593,0.988593156,0.994930292,1]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None     


######################################################
######################################################
#---  Distribution
######################################################
##################################################################################################################################################################

     #https://doi.org/10.1080/15732479.2015.1053949
     elif curve == "DistributionPole_Wood_Salmana": 
          wind_mps = wind_mph * 0.44704  

          x=[42,45.73033708,47.51787538,48.94790603,50.59244127,51.73646578,53.38100102,55.09703779,56.6700715,57.88559755,59.1011236,60.38815117,62.03268641,
          62.60469867,63.39121553,64.10623085,65.1072523,66.10827375,67.46680286,68.61082737,69.75485189,71.3278856,73.25842697,74.54545455,76.69050051,79.47906027,82.33912155]
          
          y=[0,0.016863406,0.037099494,0.065767285,0.112984823,0.15851602,0.232715008,0.322091062,0.42158516,0.495784148,0.563237774,0.635750422,0.715008432,
          0.741989882,0.779089376,0.801011804,0.838111298,0.871838111,0.900505902,0.927487352,0.946037099,0.962900506,0.979763912,0.988195616,0.991568297,0.996627319,1]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None     

     #https://doi.org/10.1080/15732479.2015.1053949
     elif curve == "DistributionPole_Steel_Salmana": 
          wind_mps = wind_mph * 0.44704  
          x=[38.58018386,41.08273749,42.29826353,43.94279877,45.01532176,46.30234934,47.51787538,48.2328907,49.59141982,50.52093973,52.30847804,53.95301328,55.38304392,56.95607763,58.31460674,59.31562819,
          60.38815117,61.31767109,62.03268641,62.60469867,63.17671093,63.89172625,64.46373851,65.82226762,66.75178754,67.53830439,68.82533197,69.89785495,70.82737487,72.11440245,73.3299285,74.61695608,
          76.18998979,78.26353422,80.76608784]
          
          y=[0,0.003372681,0.011804384,0.018549747,0.030354132,0.047217538,0.062394604,0.077571669,0.107925801,0.136593592,0.198988196,0.26306914,0.338954469,0.416526138,
          0.485666105,0.541315346,0.596964587,0.645868465,0.679595278,0.704890388,0.730185497,0.76391231,0.784148398,0.831365936,0.858347386,0.885328836,0.913996627,0.929173693,
          0.944350759,0.961214165,0.97470489,0.981450253,0.989881956,0.993254637,1]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)
          p_failure[p_failure>y[-1]]=None     

     #https://doi.org/10.1016/j.engstruct.2019.01.048
     #case a- fixed design parameters
     elif curve == "Distribution_Poles_Darestani_C5":
          x=[62.62425447,72.06759443,79.77137177,85.23856859,89.71172962,95.17892644,99.65208748,105.3677932,110.0894632,115.805169,120.526839,124.7514911,130.7157058,139.6620278,146.8687873,
          151.8389662,155.3180915,157.554672,161.5308151,165.0099404,167.9920477,170.4771372,172.4652087,174.7017893,179.6719682,184.1451292,189.3638171,194.8310139,200.7952286,207.7534791,
          213.2206759,221.9184891,229.6222664,249.7514911]
          y=[0,0.005571031,0.006963788,0.013927577,0.02367688,0.040389972,0.064066852,0.097493036,0.142061281,0.192200557,0.247910864,0.30362117,0.374651811,0.497214485,0.580779944,
          0.637883008,0.675487465,0.701949861,0.739554318,0.764623955,0.789693593,0.807799443,0.823119777,0.839832869,0.867688022,0.88718663,0.91086351,0.930362117,0.948467967,
          0.962395543,0.967966574,0.980501393,0.986072423,1]
                    
          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          
          #http://dx.doi.org/10.1016/j.ress.2015.07.028
     elif curve == "Distribution_Poles_Salman": 
          wind_mps = wind_mph * 0.44704  
          x=[46.57505285,49.31289641,52.42071882,54.04862579,55.602537,57.08245243,57.97040169,59.74630021,60.5602537,61.5961945,62.33615222,65.96194503,67.66384778,
          69.21775899,70.69767442,72.47357294,73.65750529,74.76744186,75.95137421,77.13530655,78.98520085,80.61310782,83.94291755,87.1987315]
          y=[0,0.011695906,0.029239766,0.046783626,0.081871345,0.125730994,0.152046784,0.216374269,0.260233918,0.301169591,0.34502924,0.538011696,
          0.643274854,0.701754386,0.760233918,0.824561404,0.859649123,0.891812865,0.915204678,0.935672515,0.961988304,0.976608187,0.994152047,1]

                    
          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)

     #https://doi.org/10.1109/TPWRD.2013.2281265
     #new poles
     elif curve == "Distribution_Wood_PolesNew_Shafieezadeh_C3":
          
          x=[106.9246436,114.0529532,122.7087576,130.3462322,134.9287169,140.0203666,148.1670061,155.8044807,164.4602851,173.1160896,180.7535642,186.8635438,
          191.4460285,196.0285132,202.1384929,206.2118126,211.3034623,215.885947,220.9775967,229.1242363,237.7800407,245.9266802] 
          y=[0,0.005347594,0.024064171,0.050802139,0.07486631,0.109625668,0.160427807,0.221925134,0.310160428,0.403743316,0.486631016,
          0.548128342,0.596256684,0.644385027,0.697860963,0.737967914,0.772727273,0.807486631,0.834224599,0.874331551,0.906417112,0.927807487]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)

     #https://doi.org/10.1109/TPWRD.2013.2281265
     #new poles
     elif curve == "Distribution_Wood_PolesNew_Shafieezadeh_C5":
          x=[76.37474542,89.10386965,99.28716904,107.4338086,113.0346232,118.6354379,125.7637475,134.9287169,142.0570265,148.6761711,153.7678208,159.8778004,165.98778,169.5519348,
          175.6619145,183.299389,191.4460285,202.1384929,211.8126273,223.5234216,233.197556]
          y=[0,0.005319149,0.021276596,0.053191489,0.087765957,0.138297872,0.231382979,0.35106383,0.460106383,0.555851064,0.632978723,0.704787234,0.765957447,0.808510638,0.859042553,
          0.89893617,0.936170213,0.965425532,0.986702128,0.997340426,0]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          
     #https://doi.org/10.1109/TPWRD.2013.2281265
     #new poles
     elif curve == "Distribution_Wood_Poles50yo_Shafieezadeh_C5":
          x=[60.07157464,68.25153374,75.9202454,80.52147239,86.65644172,91.00204499,97.39263804,103.0163599,110.4294479,116.0531697,122.1881391,128.8343558,134.9693252,142.3824131,
          149.0286299,155.1635992,161.2985685,166.4110429,170.5010225,177.402863,183.5378323,190.4396728,196.3190184,203.9877301,216.002045,230.3169734,245.9100204]
          y=[0,0.001345895,0.00538358,0.017496635,0.03230148,0.052489906,0.092866756,0.142664872,0.216689098,0.279946164,0.35666218,0.446837147,0.524899058,0.612382234,0.682368775,
          0.742934051,0.795423957,0.827725437,0.858681023,0.889636608,0.916554509,0.936742934,0.952893674,0.966352624,0.982503365,0.99730821,1]

          p_failure = np.interp(wind_mph, x, y, left=0.0, right=1.0)
          
     #https://doi.org/10.1061/(ASCE)AS.1943-5525.0001029
     elif curve == "DistributionPoles_Tornado_Braik":
          wind_mps = wind_mph * 0.44704 
          x=[42.33877234,44.13364413,45.38461538,47.07070707,48.15850816,49.84459984,51.0955711,53.05361305,56.37140637,58.38383838,60.45066045,61.7016317,63.17016317,64.91064491,
          66.43356643,68.5003885,70.51282051,72.63403263,74.53768454,77.2027972,79.54156954,82.85936286,87.59129759]
          y=[0.007380074,0.02398524,0.044280443,0.073800738,0.101476015,0.143911439,0.193726937,0.280442804,0.450184502,0.557195572,0.656826568,0.710332103,0.763837638,0.819188192,
          0.863468635,0.905904059,0.94095941,0.959409594,0.974169742,0.988929889,0.992619926,0.998154982,0]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)          
                      
     #https://doi.org/10.1061/(ASCE)AS.1943-5525.0001029
     elif curve == "DistributionPoles_Hurricane_Braik":
          wind_mps = wind_mph * 0.44704 
          x=[50.17094017,52.02020202,54.79409479,57.56798757,59.74358974,61.81041181,63.76845377,66.10722611,67.57575758,69.42501943,72.36208236,74.53768454,76.82206682,78.997669,81.71717172,
          83.83838384,85.30691531,86.88422688,88.40714841,90.31080031,92.16006216,93.79176379,96.4024864,99.06759907,102.0590521,105.8663559]
          y=[0,0.001845018,0.005535055,0.018450185,0.031365314,0.053505535,0.088560886,0.143911439,0.188191882,0.247232472,0.357933579,0.45202952,0.546125461,0.634686347,0.725092251,0.787822878,
          0.822878229,0.856088561,0.891143911,0.915129151,0.94095941,0.955719557,0.972324723,0.983394834,0.994464945,1]

          p_failure = np.interp(wind_mps, x, y, left=0.0, right=1.0)   
     return p_failure


#Attention on ASCE 7 Wind loads vs  Saffir–Simpson Hurricane Wind Scale  http://www.ncsea.com/downloads/files/Resources/2022%20Summit%20Wind%20White%20Papers/NCSEA%20-%20Hurricane%20FAQ.pdf